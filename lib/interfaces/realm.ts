import AuthenticationFlow from './authentication-flow';
import AuthenticatorConfig from './authentication-config';
import Client from './client';
import ClientScope from './client-scope';
import Group from './group';
import IdentityProvider from './identity-provider';
import IdentityProviderMapper from './identity-provider-mapper';
import MultivaluedHashMap from './multivalued-hash-map';
import ProtocolMapper from './protocol-mapper';
import RequiredActionProvider from './required-action-provider';
import Roles from './roles';
import ScopeMapping from './scope-mapping';
import User from './user';
import UserFederationMapper from './user-federation-mapper';
import UserFederationProvider from './user-federation-provider';


export default interface Realm {
  accessCodeLifespan?: number,
  accessCodeLifespanLogin?: number,
  accessCodeLifespanUserAction?: number,
  accessTokenLifespan?: number,
  accessTokenLifespanForImplicitFlow?: number,
  accountTheme?: string,
  actionTokenGeneratedByAdminLifespan?: number,
  actionTokenGeneratedByUserLifespan?: number,
  adminEventsDetailsEnabled?: boolean,
  adminEventsEnabled?: boolean,
  adminTheme?: string,
  attributes?: Map<string, string>,
  authenticationFlows?: AuthenticationFlow[],
  authenticatorConfig?: AuthenticatorConfig[],
  browserFlow?: string,
  browserSecurityHeaders?: Map<string, string>,
  bruteForceProtected?: boolean,
  clientAuthenticationFlow?: string,
  clientOfflineSessionIdleTimeout?: number,
  clientOfflineSessionMaxLifespan?: number,
  clientScopeMappings?: Map<string, string>,
  clientScopes?: ClientScope[],
  clientSessionIdleTimeout?: number,
  clientSessionMaxLifespan?: number,
  clients?: Client[],
  components?: MultivaluedHashMap<string, string>,
  defaultDefaultClientScopes?: string[],
  defaultGroups?: string[],
  defaultLocale?: string,
  defaultOptionalClientScopes?: string[],
  defaultRoles?: string[],
  defaultSignatureAlgorithm?: string,
  directGrantFlow?: string,
  displayName?: string,
  displayNameHtml?: string,
  dockerAuthenticationFlow?: string,
  duplicateEmailsAllowed?: boolean,
  editUsernameAllowed?: boolean,
  emailTheme?: string,
  enabled?: boolean,
  enabledEventTypes?: string[],
  eventsEnabled?: boolean,
  eventsExpiration?: number,
  eventsListeners?: string[],
  failureFactor?: number,
  federatedUsers?: User[],
  groups?: Group[],
  id?: string,
  identityProviderMappers?: IdentityProviderMapper[],
  identityProviders?: IdentityProvider[],
  internationalizationEnabled?: boolean,
  keycloakVersion?: string,
  loginTheme?: string,
  loginWithEmailAllowed?: boolean,
  maxDeltaTimeSeconds?: number,
  maxFailureWaitSeconds?: number,
  minimumQuickLoginWaitSeconds?: number,
  notBefore?: number,
  offlineSessionIdleTimeout?: number,
  offlineSessionMaxLifespan?: number,
  offlineSessionMaxLifespanEnabled?: boolean,
  otpPolicyAlgorithm?: string,
  otpPolicyDigits?: number,
  otpPolicyInitialCounter?: number,
  otpPolicyLookAheadWindow?: number,
  otpPolicyPeriod?: number,
  otpPolicyType?: string,
  otpSupportedApplications?: string[],
  passwordPolicy?: string,
  permanentLockout?: boolean,
  protocolMappers?: ProtocolMapper[],
  quickLoginCheckMilliSeconds?: number,
  realm?: string,
  refreshTokenMaxReuse?: number,
  registrationAllowed?: boolean,
  registrationEmailAsUsername?: boolean,
  registrationFlow?: string,
  rememberMe?: boolean,
  requiredActions?: RequiredActionProvider[],
  resetCredentialsFlow?: string,
  resetPasswordAllowed?: boolean,
  revokeRefreshToken?: boolean,
  roles?: Roles,
  scopeMappings?: ScopeMapping[],
  smtpServer?: Map<string, string>,
  sslRequired?: string,
  ssoSessionIdleTimeout?: number,
  ssoSessionIdleTimeoutRememberMe?: number,
  ssoSessionMaxLifespan?: number,
  ssoSessionMaxLifespanRememberMe?: number,
  supportedLocales?: string[],
  userFederationMappers?: UserFederationMapper[],
  userFederationProviders?: UserFederationProvider[],
  userManagedAccessAllowed?: boolean,
  users?: User[],
  verifyEmail?: boolean,
  waitIncrementSeconds?: number,
  webAuthnPolicyAcceptableAaguids?: string[],
  webAuthnPolicyAttestationConveyancePreference?: string,
  webAuthnPolicyAuthenticatorAttachment?: string,
  webAuthnPolicyAvoidSameAuthenticatorRegister?: boolean,
  webAuthnPolicyCreateTimeout?: number,
  webAuthnPolicyPasswordlessAcceptableAaguids?: string[],
  webAuthnPolicyPasswordlessAttestationConveyancePreference?: string,
  webAuthnPolicyPasswordlessAuthenticatorAttachment?: string,
  webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister?: boolean,
  webAuthnPolicyPasswordlessCreateTimeout?: number,
  webAuthnPolicyPasswordlessRequireResidentKey?: string,
  webAuthnPolicyPasswordlessRpEntityName?: string,
  webAuthnPolicyPasswordlessRpId?: string,
  webAuthnPolicyPasswordlessSignatureAlgorithms?: string[],
  webAuthnPolicyPasswordlessUserVerificationRequirement?: string,
  webAuthnPolicyRequireResidentKey?: string,
  webAuthnPolicyRpEntityName?: string,
  webAuthnPolicyRpId?: string,
  webAuthnPolicySignatureAlgorithms?: string[],
  webAuthnPolicyUserVerificationRequirement?: string
}